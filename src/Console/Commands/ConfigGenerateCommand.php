<?php

namespace Aether\Console\Commands;

use Aether\Aether;
use Aether\Config;
use Aether\AetherConfig;
use Aether\Console\Command;

class ConfigGenerateCommand extends Command
{
    protected $signature = 'config:generate';

    protected $description = 'Generate compiled configuration files.';

    public function handle()
    {
        $this->call('config:clear');

        // Delete the already resolved instances, otherwise it will just write
        // what's already written.
        // $this->aether->forgetInstance(AetherConfig::class);
        // $this->writeCompiledConfig($this->aether);
        // $this->writeAetherConfig($this->aether);

        // Spin up a new Aether instance inside Aether.
        $aether = new Aether($this->aether['projectRoot']);

        $this->writeCompiledConfig($aether);

        $this->writeAetherConfig($aether);

        $this->info('Compiled configuration files have been generated.');

        $this->info("Environment: {$aether['config']['app.env']}");

        if (! $aether->isProduction()) {
            $this->writeDeveloperNotice();
        }
    }

    protected function writeCompiledConfig($aether)
    {
        $file = "{$this->aether['projectRoot']}config/compiled.php";

        $data = '<?php return '.var_export($aether['config']->all(), true).';';

        file_put_contents($file, $data);
    }

    protected function writeAetherConfig($aether)
    {
        $aether['aetherConfig']->saveToFile(
            "{$this->aether['projectRoot']}config/autogenerated.config.xml"
        );
    }

    protected function writeDeveloperNotice()
    {
        $this->alert("The days of generateConfig during development are over");
        $this->warn("To remove the generated files, run: aether config:clear");
    }
}
