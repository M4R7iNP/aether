<?php

namespace Aether\Console\Commands;

use Aether\Aether;
use Aether\Config;
use Aether\AetherConfig;
use Aether\Console\Command;

class GenerateConfigCommand extends Command
{
    protected $signature = 'config:generate';

    protected $description = 'foo? bar?';

    public function handle()
    {
        $this->deleteFiles();

        // Delete the already resolved instances, otherwise it will just write
        // what's already written.
        // $this->aether->forgetInstance(Config::class);
        // $this->aether->forgetInstance(AetherConfig::class);
        // $this->writeCompiledConfig($this->aether);
        // $this->writeAetherConfig($this->aether);

        // Spin up a new Aether instance inside Aether.
        $aether = new Aether($this->aether['projectRoot']);

        $this->writeCompiledConfig($aether);

        $this->writeAetherConfig($aether);

        $this->info('All done!');
    }

    protected function writeCompiledConfig($aether)
    {
        $file = $this->getCompiledConfigFile();

        $data = '<?php return '.var_export($aether['config']->all(), true).';';

        file_put_contents($file, $data);
    }

    protected function writeAetherConfig($aether)
    {
        $aether['aetherConfig']->saveToFile(
            $this->getAetherConfigFile()
        );
    }

    protected function getAetherConfigFile()
    {
        return "{$this->aether['projectRoot']}config/autogenerated.config.xml";
    }

    protected function getCompiledConfigFile()
    {
        return "{$this->aether['projectRoot']}config/compiled.php";
    }

    protected function deleteFiles()
    {
        if (file_exists($file = $this->getAetherConfigFile())) {
            unlink($file);
        }

        if (file_exists($file = $this->getCompiledConfigFile())) {
            unlink($file);
        }
    }
}
