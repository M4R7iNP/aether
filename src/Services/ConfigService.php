<?php

namespace Aether\Services;

use Exception;
use Aether\Config;
use Aether\AetherConfig;
use Aether\Exceptions\MissingFile;
use Aether\Exceptions\NoUrlRuleMatch;

class ConfigService extends Service
{
    public function register()
    {
        $this->registerAppConfig();

        $this->registerAetherConfig();

        $this->mergeConfigFrom(dirname(__DIR__).'/baseAppConfig.php', 'app');
    }

    protected function registerAppConfig()
    {
        // Load the application config and bind it to the service locator, so
        // that we can easily access it anywhere in the code using the
        // `config()` helper function.
        $this->container->singleton('config', function ($container) {
            return new Config($container['projectRoot']);
        });
    }

    protected function registerAetherConfig()
    {
        $this->container->singleton('aetherConfig', function ($container) {
            $projectRoot = $container['projectRoot'];

            if (! file_exists($configPath = $projectRoot.'config/autogenerated.config.xml')) {
                $configPath = $projectRoot.'config/aether.config.xml';
            }

            $aetherConfig = new AetherConfig($configPath);

            if ($container->bound('parsedUrl')) {
                $aetherConfig->matchUrl($container['parsedUrl']);
            }

            return $aetherConfig;
        });
    }
}
