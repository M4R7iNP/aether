<?php

namespace Aether\Services;

use Exception;
use Aether\Config;
use Aether\AetherConfig;
use Aether\Exceptions\MissingFile;
use Aether\Exceptions\NoUrlRuleMatch;

class ConfigService extends Service
{
    public function register()
    {
        $this->registerAppConfig();

        $this->registerAetherConfig();
    }

    protected function registerAppConfig()
    {
        // Load the application config and bind it to the service locator, so
        // that we can easily access it anywhere in the code using the
        // `config()` helper function.
        $this->container->instance(
            Config::class,
            new Config($this->container['projectRoot'])
        );
    }

    protected function registerAetherConfig()
    {
        $projectPath = $this->container['projectRoot'];

        if (!file_exists($configPath = $projectPath.'config/autogenerated.config.xml')) {
            $configPath = $projectPath.'config/aether.config.xml';
        }

        $this->container->singleton(AetherConfig::class, function ($container) use ($configPath) {
            $aetherConfig = new AetherConfig($configPath);

            if ($container->bound('parsedUrl')) {
                $aetherConfig->matchUrl($container['parsedUrl']);
            }

            return $aetherConfig;
        });

        // Backwards compatibility...
        $this->container->alias(AetherConfig::class, 'aetherConfig');
    }
}
